"use strict"

const nunjucks = require('nunjucks');
const jsonlint = require("jsonlint");

const fs = require('fs-extra')
const path = require('path');
function rmrf(dir_path) {
  if (fs.existsSync(dir_path)) {
    fs.readdirSync(dir_path).forEach(function(file, index){
      var curPath = dir_path + "/" + file;
      if (fs.lstatSync(curPath).isDirectory()) { // recurse
        rmrf(curPath);
      } else { // delete file
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(dir_path);
  }
};

const page_blacklist = [
  ".builtin"
]

var default_html = fs.readFileSync(__dirname+'/../templates.io/default_templates/index.html', 'utf8');
var default_json = fs.readFileSync(__dirname+'/../templates.io/default_templates/context.json', 'utf8');
var default_css = fs.readFileSync(__dirname+'/../templates.io/default_templates/theme.css', 'utf8');
var default_js = fs.readFileSync(__dirname+'/../templates.io/default_templates/main.js', 'utf8');

var ncp = require('ncp').ncp;


module.exports = class {
  constructor(app, posts, templates) {
    this.app = app;
    this.posts = posts;

    var page_dir = this.page_dir = global.cmb_config.pages_path;
    var template_dir = global.cmb_config.templates_path;

    this.nunjucks_env = new nunjucks.Environment(new nunjucks.FileSystemLoader([
      page_dir
    ], {
      autoescape: true,
//      watch: true,
      noCache: true
    }));

    if (!fs.existsSync(page_dir)){
      fs.mkdirSync(page_dir);
      fs.mkdirSync(path.resolve(page_dir, '.builtin'));
    }

    var err_response = function(res, text) {
      res.send(JSON.stringify({
        err: text
      }));
    }

    var this_class = this;

    app.get("/p/*", async function(req, res) {
      try {
        var resource_path = path.resolve(
          page_dir,
          req.path.substring(3)
        );

        if (fs.lstatSync(resource_path).isDirectory()) {
          if (req.path.slice(-1) != "/") {
            res.redirect(req.path+"/");
          } else {
            var result = await this_class.render_page(resource_path);
            if (result.err) {
              res.send(result.err);
            } else {
              res.send(result.html);
            }
          }
        } else if (resource_path.endsWith('.html')) {
          var dir_path = resource_path.substring(
            0, resource_path.lastIndexOf("/")
          );
          var result = this_class.render_page(dir_path);
          if (result.err) {
            res.send(result.err);
          } else {
            res.send(result.html);
          }
        } else {
          res.sendFile(resource_path);
        }
      } catch (e) {
        console.error(e.stack)
      }
    });

    app.get(global.cmb_config.admin_path+"/pages.io", function(req, res) {
      var data = JSON.parse(req.query.data);
      /*
        {
          command: "all"
        }
      */
      switch (data.command) {
        case 'all':
          var list = this_class.all();
          res.send(JSON.stringify(list));
          break;
        default:
          console.log("PagesIO: unknown command", data.command);
      }
    });

    app.post(global.cmb_config.admin_path+"/pages.io", function(req, res) {
      var data = JSON.parse(req.body.data);
      /*
        {
          command: "add"|"rm",
          name: "string" - needed on `add` and `rm` commands
        }
      */
      switch (data.command) {
        case 'add':
          if (data.name) {
            if (data.name.length > 0) {
              data.path = path.resolve(page_dir, data.name);
              if (data.path.startsWith(page_dir)) {
                if (!fs.existsSync(data.path)){
                  if (data.template) {
                    var src_path = path.resolve(template_dir, data.template);
                    console.log(data.path);
                    fs.copy(src_path, data.path, function (err) {
                      if (err) return console.error(err)
                      console.log('success!')
                      res.send(JSON.stringify({ msg: "success" }));
                    });
                  } else {
                    fs.mkdirSync(data.path);
                    fs.writeFileSync(path.resolve(data.path, "index.html"), default_html);
                    fs.writeFileSync(path.resolve(data.path, "context.json"), default_json);
                    fs.writeFileSync(path.resolve(data.path, "theme.css"), default_css);
                    fs.writeFileSync(path.resolve(data.path, "main.js"), default_js);
                    res.send(JSON.stringify({ msg: "success" }));
                  }
                } else {
                  err_response(res, "Page `"+data.name+"` already exists!");
                }
              }
            } else {
              err_response(res, "Page name not specified!");
            }
          } else {
            err_response(res, "Page name not specified!");
          }
          break;
        case 'rm':
          if (data.name) {
            if (data.name.length > 0) {
              data.path = path.resolve(page_dir, data.name);
              if (data.path.startsWith(page_dir)) {
                rmrf(data.path);
                res.send("success");
              }
            } else {
              err_response(res, "Page name not specified!");
            }
          } else {
            err_response(res, "Page name not specified!");
          }
          break;
        default:
          console.log("PagesIO: unknown command", data.command);
      }
    });
  }

  async add_builtin(full_path) {
    var filename = full_path.replace(/^.*[\\\/]/, '');
    var builtin_path = path.resolve(this.page_dir, '.builtin', filename);
    if (!fs.existsSync(builtin_path)) {
      fs.copy(full_path, builtin_path, function (err) {
        if (err) return console.error(err)
        console.log('Builtin page successfuly added');
      });
    }
  }

  async all_builtin() {
    var builtin_dir = path.resolve(this.page_dir, '.builtin');

    var list = [];
    var this_class = this;
    fs.readdirSync(builtin_dir).forEach(file => {
      var lstat = fs.lstatSync(path.resolve(this_class.page_dir, file));
      if (lstat.isDirectory()) {
        list.push(file);
      }
    });

    list.sort(function(a, b) {
      return fs.statSync(path.resolve(this_class.page_dir, a)).birthtime.getTime() - fs.statSync(path.resolve(this_class.page_dir, b)).birthtime.getTime();
    });

    return list;
  }

  all() {
    var list = [];
    var this_class = this;
    fs.readdirSync(this.page_dir).forEach(file => {
      var blacklisted = false;
      for (var b = 0; b < page_blacklist.length; b++) {
        if (file == page_blacklist[b]) {
          blacklisted = true;
        }
      }
      if (!blacklisted) {
        var lstat = fs.lstatSync(path.resolve(this_class.page_dir, file));
        if (lstat.isDirectory()) {
          list.push(file);
        }
      }
    });

    list.sort(function(a, b) {
      return fs.statSync(path.resolve(this_class.page_dir, a)).birthtime.getTime() - fs.statSync(path.resolve(this_class.page_dir, b)).birthtime.getTime();
    });

    return list;
  }

  async compile_context(context) {
    try {
      if (context.posts) {
        var tags = context.posts.split(" ");
        var result = await this.posts.select_by_tags(tags);

        context.posts = result;
      }
      if (context.menu) {
        var names = context.menu.split(" ");
        console.log(names);
        context.menu = [];
        var page_list = this.all();
        for (var p = 0; p < page_list.length; p++) {
          for (var n = 0; n < names.length; n++) {
            if (page_list[p] == names[n]) {
              context.menu.push(names[n]);
            }
          }
        }
      }
      return context;
    } catch (e) {
      console.error(e.stack)
    }
  }

  async render_page(page_dir_path) {
    try {
      var index_html = path.resolve(page_dir_path, "index.html");
      var context_json = path.resolve(page_dir_path, "context.json");
      var global_context_json = path.resolve(global.cmb_config.globals_path, "context.json");

      var result = {};

      if (fs.existsSync(index_html)) {
        if (fs.existsSync(context_json) || fs.existsSync(global_context_json)) {
          var context, err = false;
          if (fs.existsSync(context_json)) {
            try {
              context = jsonlint.parse(fs.readFileSync(context_json, 'utf8'));
            } catch(e) {
              result.err = e.message+"\n\nat "+page_dir_path+"/context.json";
            }
          }
          if (fs.existsSync(global_context_json)) {
            try {
              var global_context = jsonlint.parse(fs.readFileSync(global_context_json, 'utf8'));
              context = Object.assign(global_context, context);
            } catch(e) {
              result.err = e.message+"\n\nat global/context.json";
            }
          }
          context = await this.compile_context(context);
          var rendered_html = this.nunjucks_env.render(index_html, context);


          result.html = rendered_html;
        } else {
          res.send(index_html);
        }
      } else {
        err = "No HTML!";
      }

      if (result.err) {
        var style = "font-family: monospace;";
        result.err = "<div style='"+style+"'>"+result.err.replace(/(?:\r\n|\r|\n)/g, '<br />')+"</div>"
      }

      return result;
    } catch (e) {
      console.error(e.stack)
    }
  }
}
