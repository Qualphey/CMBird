[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "cmbird/index.js",
    "content": "'use strict'\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst bcrypt = require('bcryptjs');\nconst crypto = require(\"crypto\");\n\nconst nunjucks = require('nunjucks');\n\nconst jsonlint = require(\"jsonlint\");\n\nconst Router = require(\"./modules/router/router.js\");\n\nconst Auth = require(\"./modules/auth.io/index.js\");\n\nconst PagesIO = require(\"./modules/pages.io/index.js\");\nconst BuiltinIO = require(\"./modules/pages.io/builtin.js\");\nconst PostsIO = require(\"./modules/posts.io/index.js\");\nconst FMIO = require(\"./modules/treefm.io/fm.io.js\");\nconst GalleryIO = require(\"./modules/gallery.io/index.js\");\nconst AdminAccountsIO = require(\"./modules/admin_accounts.io/index.js\");\nconst UserAccountsIO = require(\"./modules/user_accounts.io/index.js\");\nconst ModuleManagerIO = require(\"./modules/module_manager.io/index.js\");\n\nconst Aura = require('pg-aura');\n\n/**\n * The main class of this cms.\n */\nmodule.exports = class CMBird {\n\n  /**\n   * constructor.\n   * @param {Object} cfg - configuration object\n   * @param {string} cfg.host - hostname i.e. `localhost`\n   * @param {integer} cfg.port - port i.e. `8080`\n   * @param {string} cfg.db_user - postgresql super user name i.e. `postgres`\n   * @param {string} cfg.db_pwd - postgresql super user password i.e. `postgres`\n   * @param {string} cfg.app_path - path to app top level directory i.e. `__dirname`\n   * @param {function(router: Router)} callback - this is function param.\n   */\n  constructor(cfg) {\n    const config_path = path.resolve(cfg.app_path, 'config.json');\n    var config = undefined;\n    if (fs.existsSync(config_path)) {\n      config = JSON.parse(fs.readFileSync(config_path, 'utf8'));\n    } else {\n      config = {\n        setup: true,\n        admin_path: \"/cmb_admin\"\n      }\n    }\n    global.cmb_config = config;\n\n    config.app_path = cfg.app_path;\n    config.pages_path = path.resolve(cfg.app_path, 'pages');\n    config.templates_path = path.resolve(cfg.app_path, 'templates');\n    config.globals_path = path.resolve(cfg.app_path, 'globals');\n    config.host = cfg.host;\n    config.port = cfg.port;\n    config.db_super_user = cfg.db_user;\n    config.db_super_pwd = cfg.db_pwd;\n\n    var this_class = this;\n\n    this.nunjucks_env = new nunjucks.Environment(new nunjucks.FileSystemLoader([\n      config.pages_path,\n      config.templates_path\n    ], {\n      autoescape: true,\n//      watch: true,\n      noCache: true\n    }));\n\n    if (!fs.existsSync(config.globals_path)){\n      fs.mkdirSync(config.globals_path);\n    }\n\n    (async () => {\n      let cmbird = {};\n      const router = cmbird.router = await Router.init();\n\n\n\n      router.use(function(req, res, next) {\n//        console.log(\"REQUEST\", req.path);\n\n        if (!req.path.startsWith(\"/setup\") && !req.path.startsWith(\"/initialise\") && config.setup) {\n          res.redirect(\"/setup\");\n        } else {\n          next();\n        }\n      });\n\n      var builtin_pages = await BuiltinIO.init(\n        path.resolve(config.pages_path, \".builtin\"), [\n          path.resolve(__dirname, \"builtin_pages/setup\"),\n          path.resolve(__dirname, \"builtin_pages/admin_auth\"),\n          path.resolve(__dirname, \"modules/auth.io/pages/signin\"),\n          path.resolve(__dirname, \"modules/auth.io/pages/signup\")\n        ], router, null, null, [\n          config.pages_path\n        ]\n      );\n\n\n      if (!config.setup) {\n        initialise(config.db_name);\n      }\n\n      async function initialise(db_name) {\n        try {\n\n          var aura = cmbird.aura = await Aura.connect({\n            db_host: \"127.0.0.1\",\n            db_super_usr: cfg.db_user,\n            db_super_pwd: cfg.db_pwd,\n            db_name: db_name\n          });\n\n          var posts = await PostsIO.init(router.app, aura, {\n            pages_path: config.pages_path\n          });\n\n\n          var io = router.io;\n          var admin = await Auth.init(router.app, aura, {\n            table_name: \"admin_accounts\",\n            auth_paths: {\n              unauthorized: \"/admin_auth\",\n              authenticated: config.admin_path\n            },\n            prefix: '/cmb_admin',\n            rights: true\n          });\n\n          var auth = cmbird.auth = await Auth.init(router.app, aura, {\n            table_name: \"user_accounts\",\n            auth_paths: {\n              unauthorized: \"/signin\",\n              authenticated: \"/Paskyra\"\n            },\n            prefix: '/users'\n          });\n\n          var pages_io = cmbird.pages = await PagesIO.init(router, posts, auth, admin);\n\n          function authorize(req, res, next) {\n            admin.authorize(req, res, next);\n          }\n\n          router.use(\n            config.admin_path,\n            authorize,\n            Router.static(__dirname+\"/dist\")\n          );\n\n          router.use(\n            '/g',\n            Router.static(config.globals_path)\n          );\n\n          const res_dir_path = path.resolve(__dirname, 'dist/res');\n          router.use('/cmbird-res', Router.static(res_dir_path));\n\n          var fmio_templates = new FMIO({\n            router: router,\n            targets: {\n              templates: config.templates_path,\n              pages: config.pages_path,\n              globals: config.globals_path\n            }\n          });\n\n          var modules_path = path.resolve(config.app_path, 'cmbird_modules');\n          var module_manager_io = await ModuleManagerIO.init(modules_path, cmbird);\n\n          var admin_accounts_io = await AdminAccountsIO.init(router.app, admin.table);\n          var user_accounts_io = await UserAccountsIO.init(router.app, auth.table);\n\n          var gallery_path = path.resolve(config.app_path, 'gallery');\n          var gallery_io = await GalleryIO.init(gallery_path, config.admin_path, router.app);\n\n\n\n          return admin;\n        } catch (e) {\n          console.error(e);\n          return undefined;\n        }\n      };\n\n      router.post(\"/initialise\", async function(req, res, next) {\n        try {\n          if (!config.setup) {\n            res.redirect('/');\n          } else {\n            var data = req.body;\n\n            if (!data.name) {\n              res.send(\"FAILED: name was not defined\");\n            } else if (!data.email) {\n              res.send(\"FAILED: email address was not defined\");\n            } else if (!data.pwd) {\n              res.send(\"FAILED: password was not defined\");\n            } else if (!data.pwdr) {\n              res.send(\"FAILED: you did not repeat the password\");\n            } else if (data.pwd !== data.pwdr) {\n              res.send(\"FAILED: passwords don't match\");\n            } else {\n              console.log(\"DATA\", data);\n              config.db_name = data.name.replace(/\\s+/g, '').toLowerCase();\n              config.db_pwd = crypto.randomBytes(20).toString('hex');\n              var admin = await initialise(config.db_name);\n\n              data.super = true;\n              data.creator = true;\n              var result = await admin.register(data);\n\n              if (result.err) {\n                res.send(result.err);\n              } else {\n                config.name = data.name;\n\n                config.setup = false;\n\n                var oConfig = {};\n                Object.assign(oConfig, config);\n                delete oConfig.pages_path;\n\n                fs.writeFile(config_path, JSON.stringify(oConfig, null, 4), 'utf8', function (err) {\n                  if (err) {\n                    res.send(\"Failed to write config file: \"+err);\n                    return false;\n                  } else {\n                    res.redirect(config.admin_path);\n                    return true;\n                  }\n                });\n              }\n            }\n          }\n        } catch (e) {\n          console.error(e.stack)\n        }\n      });\n\n    })().catch(e => console.error(e.stack));\n  }\n}\n",
    "static": true,
    "longname": "/home/qualphey/Development/teisine_apsauga/cmbird/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "CMBird",
    "memberof": "cmbird/index.js",
    "static": true,
    "longname": "cmbird/index.js~CMBird",
    "access": "public",
    "export": true,
    "importPath": "cmbird/cmbird/index.js",
    "importStyle": "CMBird",
    "description": "The main class of this cms.",
    "lineNumber": 31,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "cmbird/index.js~CMBird",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "cmbird/index.js~CMBird#constructor",
    "access": "public",
    "description": "constructor.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "configuration object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.host",
        "description": "hostname i.e. `localhost`"
      },
      {
        "nullable": null,
        "types": [
          "integer"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.port",
        "description": "port i.e. `8080`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.db_user",
        "description": "postgresql super user name i.e. `postgres`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.db_pwd",
        "description": "postgresql super user password i.e. `postgres`"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.app_path",
        "description": "path to app top level directory i.e. `__dirname`"
      },
      {
        "nullable": null,
        "types": [
          "function(router: Router)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "this is function param."
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "nunjucks_env",
    "memberof": "cmbird/index.js~CMBird",
    "static": false,
    "longname": "cmbird/index.js~CMBird#nunjucks_env",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# cmbird #\n\n### Content Management Bird ###\n\nA lightweight NodeJS based content management system that aims for flexibility, performance, stability and ease of use.\n\n### Installation ###\n\n`npm install cmbird`\n\nThough you also need to install `PostgreSQL` database.\n\n### Basic usage ###\n\n```javascript\nvar CMS = require(\"cmbird\");\nvar cms = new CMS({\n  host : '127.0.0.1',\n  port : 9639,\n  db_user : 'postgres', // or any other database user with super permissions\n  db_pwd: 'password',\n  app_path : __dirname\n});\n```\n\n#### WARNING: This is an experimental version. There might be serious security vulnerabilities and bugs. Reported issues and calaborators appreciated. ####\n",
    "longname": "/home/qualphey/Development/teisine_apsauga/cmbird/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]